/**=========================================================
 * Module: src/js/app.js
 * 初始化程序
 * @author: haili042
 * @time: 2016年4月1日 12:46:06
 =========================================================*/

// 一个项目只有一个 ng-app
var App = angular.module('app', [
    'ui.router'
]);

// 这里的run方法只会在angular启动的时候运行一次。
App.run(function ($rootScope, $state, $stateParams, $window, $templateCache, APP_INFO) {

    // 由于整个应用都会和路由打交道，所以这里把$state和$stateParams这两个对象放到$rootScope上，方便其它地方引用和注入。
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;

    // 应用信息, 在 constants.js 内
    $rootScope.app = APP_INFO;

    // 路由过滤器, 用来认证权限
    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {

        // 如果是进入登录页面则允许
        if (toState.name === 'page.login') {
            return true;
        }

        // 如果用户不存在
        if (!$rootScope.sessionInfo.user) {

            // 取消跳转
            event.preventDefault();

            // 跳转到登录页面
            $state.go('page.login');
        }
    });

    // 用户登录帐号信息
    $rootScope.sessionInfo = {};

});


/**=========================================================
 * Module: src/js/module/config.js
 * 配置路由
 * @author: haili042
 * @time: 2016年4月1日 12:45:24
 =========================================================*/

App
    // 路由配置
    .config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        'use strict';

        // 配置无效路由, $urlRouterProvider 负责配置指定url之外的url请求
        $urlRouterProvider.otherwise('/app/home');

        // 路由配置
        // 注意这里采用的是ui-router这个路由，而不是ng原生的路由。ng原生的路由不能支持嵌套视图
        $stateProvider

            //
            // 组件都嵌套在父路由内
            // -----------------------------------
            .state('app', {
                url: '/app',
                abstract: true, // 表明此状态不能被显性激活，只能被子状态隐性激活(子状态激活同时, 父状态也激活)
                templateUrl: 'app/tpl/frame/layout.html' // 布局
            })

            // 子路由, 点标记法(推荐)
            .state('app.home', {
                url: '/home',
                templateUrl: 'app/tpl/home/home.html'
            })
            .state('app.content', {
                //url: '/{tpl: [0-9]{1,4}}', // 匹配数字
                url: '/{tpl: [a-zA-Z$_][a-zA-Z0-9_$]*}', // 匹配变量名
                views: {
                    // @app 表示替换的是 app 状态下的匿名 ui-view
                    '@app': {
                        templateUrl: function ($routeParams) {
                            var page = $routeParams.page || '404' ;
                            return 'app/tpl/page/' + page + '.html';
                        }
                    }
                }
            })

            //
            // 单页路由
            // -----------------------------------
            .state('page', {
                url: '/page',
                abstract: true,
                templateUrl: 'app/tpl/page/page-holder.html'
            })
            .state('page.login', {
                url: '/login',
                title: "Login",
                templateUrl: 'app/tpl/page/login.html'
            })
            .state('page.register', {
                url: '/register',
                templateUrl: 'app/tpl/page/register.html'
            })
            .state('page.404', {
                url: '/404',
                templateUrl: 'app/tpl/page/404.html'
            })
        ;
    }])

    // 请求头配置
    .config(['$httpProvider', 'APP_HEADER', function($httpProvider, APP_HEADER) {

        var max_age = 'max-age=' + APP_HEADER['max-age'] || 0;

        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }

        // 设置缓存
        $httpProvider.defaults.headers.get['Cache-Control'] = max_age;
    }])

    // 拦截器设置
    .config(['$httpProvider', function($httpProvider) {

        $httpProvider.interceptors.push('authInterceptor');
        //$httpProvider.interceptors.push([
        //    '$injector',
        //    function ($injector) {
        //        return $injector.get('authInterceptor'); // 延迟注入, 否则注入不进来...
        //    }
        //]);
    }])
;
/**=========================================================
 * Module: src/js/module/constants.js
 * 定义全局变量, 调用的时候注入即可
 * @author: haili042
 * @time: 2016年4月1日 12:46:17
 =========================================================*/

App
    // 应用信息
    .constant('APP_INFO', {
        'name':                   'haili-ng-bstrp',
        'title':                  'Haili042 ng Admin系统',
        'description':            'haili042 angular bootstrap admin',
        'year':                   '2016'
    })

    // 登录权限事件
    .constant('APP_AUTH_EVENT', {
        'loginSuccess':           'event:auth-login-success',
        'loginFailed':            'event:auth-login-failed',
        'logoutSuccess':          'event:auth-logout-success',
        'logoutFailed':           'event:auth-logout-failed',
        'sessionTimeout':         'event:auth-session-timeout',
        'noAuth':                 'event:auth-no-auth',         // 401 没有权限
        'forbidden':              'event:auth-forbidden'        // 403 服务器拒绝
    })

    // 全局颜色
    .constant('APP_COLORS', {
        'primary':                '#5d9cec',
        'success':                '#27c24c',
        'info':                   '#23b7e5',
        'warning':                '#ff902b',
        'danger':                 '#f05050',
        'inverse':                '#131e26',
        'green':                  '#37bc9b',
        'pink':                   '#f532e5',
        'purple':                 '#7266ba',
        'dark':                   '#3a3f51',
        'yellow':                 '#fad732',
        'gray-darker':            '#232735',
        'gray-dark':              '#3a3f51',
        'gray':                   '#dde6e9',
        'gray-light':             '#e4eaec',
        'gray-lighter':           '#edf1f2'
    })

    // 媒体查询
    .constant('APP_MEDIAQUERY', {
        'desktopLG':             1200,
        'desktop':                992,
        'tablet':                 768,
        'mobile':                 480
    })

    // 请求响应头设置
    .constant('APP_HEADER', {
        'max-age':                 0
    })

    // 定义依赖的模块
    .constant('APP_REQUIRES', {
        // jquery 模块
        // ...

        // angular 模块
        modules: [
        ]
    })
;


/**=========================================================
 * Module: src/js/module/controller/login-ctrl.js:25
 * 登录控制器
 * @author: haili042
 * @time: 2016年4月1日 12:45:09
 =========================================================*/

App.controller('LoginCtrl', ['$http', '$state', '$scope', '$rootScope', 'APP_AUTH_EVENT',
    function($http, $state, $scope, $rootScope, APP_AUTH_EVENT) {

        $scope.name = '';

        $scope.login = function () {
            var url = '',
                params = {
                    user: $scope.account.user,
                    psw: $scope.account.psw
                };

            // 测试用的
            if ($scope.account.remember) {
                $scope.authMsg = '帐号不存在';
                return false;
            }

            if ($scope.loginForm.$valid) { // 校验表单

                $rootScope.sessionInfo.user = $scope.account.user;
                $rootScope.sessionInfo.token = new Date().getTime(); // 这个也是后台获取

                $state.go('app.home');
                $http.post(url, params)
                    .then(function (res) {
                        // TODO ...
                    }, function () {
                        // 失败了..
                        // TODO ...
                        // 身份认证会影响整个应用, 所以需要广播事件
                        $rootScope.$broadcast(APP_AUTH_EVENT.loginFailed);
                    });
            } else {
                $scope.loginForm.account_user.$dirty = true;
                $scope.loginForm.account_psw.$dirty = true;
            }

    };
}]);
/**=========================================================
 * Module: src/js/module/controller/sidebar-left-ctrl.js
 * 菜单控制器
 * @author: haili042
 * @time: 2016年4月1日 11:09:41
 =========================================================*/

App.controller('SideBarLeftCtrl', ['$http', '$scope', '$state', function ($http, $scope, $state) {

    var url = '/test/data/menu.json',
        params = {};
    $http.get(url, params)
        .then(function (res) {
            $scope.menuDate = res.data;
        });



}]);
/**=========================================================
 * Module: src/js/module/service/auth.js
 * 用户权限service
 * @author: haili042
 * @time: 2016年4月1日 12:43:51
 =========================================================*/

/**
 * 依赖 HttpService service
 */
App
    .service('authService', ['$rootScope', 'httpBuffer', function($rootScope, httpBuffer) {
        'use strict';

        /**
         * Call this function to indicate that authentication was successfull and trigger a
         * retry of all deferred requests.
         * @param data an optional argument to pass on to $broadcast which may be useful for
         * example if you need to pass through details of the user that was logged in
         * @param configUpdater an optional transformation function that can modify the
         * requests that are retried after having logged in.  This can be used for example
         * to add an authentication token.  It must return the request.
         */
        this.loginConfirmed = function (data, configUpdater) {
            var updater = configUpdater || function(config) {return config;};
            $rootScope.$broadcast('event:auth-loginConfirmed', data);
            httpBuffer.retryAll(updater);
        };


        /**
         * Call this function to indicate that authentication should not proceed.
         * All deferred requests will be abandoned or rejected (if reason is provided).
         * @param data an optional argument to pass on to $broadcast.
         * @param reason if provided, the requests are rejected; abandoned otherwise.
         */
        this.loginCancelled = function(data, reason) {
            httpBuffer.rejectAll(reason);
            $rootScope.$broadcast('event:auth-loginCancelled', data);
        };
    }])
;

/**=========================================================
 * Module: src/js/module/service/http-buffer.js
 * 缓存http请求, 方便登录后重新访问原来页面, 批量发出请求
 * @author: haili042
 * @time: 2016年4月5日 09:07:08
 =========================================================*/

App.service('httpBuffer', ['$injector', function($injector) {
    'use strict';


    var buffer = [], // 缓存请求
        $http;       // 延迟初始化 $http service

    /**
     * @params config 是一个 http 请求信息对象
     * @params deferred 是一个 promise 对象
     * */
    function retryHttpRequest(config, deferred) {

        function successCallBack(response) {
            deferred.resolve(response);
        }

        function errorCallBack(response) {
            deferred.reject(response);
        }

        // 注入器注入 http 服务
        $http = $http || $injector.get('http');

        // 请求promise
        $http(config).then(successCallBack, errorCallBack);
    }


    /**
     * 增加http请求到buffer
     * @return {Number} 返回buffer新长度.
     */
    this.append = function (config, deferred) {
        return buffer.push({
            config: config,
            deferred: deferred
        })
    };

    /**
     * 拒绝所有请求, 清空buffer
     * */
    this.rejectAll = function (reason) {
        var i,
            len = buffer.length;

        if (reason) {
            for (i = 0; i < len; i++) {
                buffer[i].deferred.reject(reason);
            }
        }

        buffer = [];
    };

    /**
     * 尝试重新发起所有请求, 清空buffer
     * */
    this.retryAll = function(updater) {
        var i,
            len = buffer.length,
            cfg;

        for (i = 0; i < len; i++) {
            cfg = updater(buffer[i].config);

            if (cfg !== false) {
                retryHttpRequest(cfg, buffer[i].deferred)
            }
        }

        buffer = [];
    };

}]);

/**=========================================================
 * Module: src/js/module/service/interceptor.js
 * 拦截器
 * @author: haili042
 * @time: 2016年4月5日 09:44:13
 =========================================================*/

/**
 *
 通过实现 request 方法拦截请求:
 该方法会在 $http 发送请求道后台之前执行，因此你可以修改配置或做其他的操作。
 该方法接收请求配置对象(request configuration object)作为参数，然后必须返回配置对象或者 promise 。
 如果返回无效的配置对象或者 promise 则会被拒绝，导致 $http 调用失败。

 通过实现 response 方法拦截响应:
 该方法会在 $http 接收到从后台过来的响应之后执行，因此你可以修改响应或做其他操作。
 该方法接收响应对象(response object)作为参数，然后必须返回响应对象或者 promise。
 响应对象包括了请求配置(request configuration)，头(headers)，状态(status)和从后台过来的数据(data)。
 如果返回无效的响应对象或者 promise 会被拒绝，导致 $http 调用失败。

 通过实现 requestError 方法拦截请求异常:
 有时候一个请求发送失败或者被拦截器拒绝了。请求异常拦截器会俘获那些被上一个请求拦截器中断的请求。
 它可以用来恢复请求或者有时可以用来撤销请求之前所做的配置，比如说关闭进度条，激活按钮和输入框什么之类的。

 通过实现 responseError 方法拦截响应异常:
 有时候我们后台调用失败了。也有可能它被一个请求拦截器拒绝了，或者被上一个响应拦截器中断了。
 在这种情况下，响应异常拦截器可以帮助我们恢复后台调用。

 */

App
    // 拦截器定义
    .factory('authInterceptor', ['$rootScope', '$q', 'httpBuffer', 'APP_AUTH_EVENT',
        function ($rootScope, $q, httpBuffer, APP_AUTH_EVENT) {
        return {
            /**
             * 请求之前执行
             * */
            request: function(config) {
                config.headers['TOKEN'] = $rootScope.sessionInfo.token;
                console.log(config);
                return config; // 必须返回 promise 对象或 config 对象
            },


            /**
             * 响应错误
             * */
            responseError: function (response) {
                var config = response.config || {};
                if (!config.ignoreAuthModule) {

                    switch (response.status) {

                        /**
                         * 401 没有权限 - user not login
                         * */
                        case 401:
                            var deferred = $q.defer();

                            // 当前请求添加到 buffer
                            var bufferLength = httpBuffer.append(config, deferred);

                            // 只有一个的情况, 即当前请求
                            if (bufferLength === 1) {
                                // 广播没有权限事件
                                $rootScope.$broadcast(APP_AUTH_EVENT['noAuth'], response);
                            }
                            return deferred.promise;

                        /**
                         * 403 服务器拒绝 — The user is logged in but isn’t allowed access
                         * */
                        case 403:
                            // 广播事件
                            $rootScope.$broadcast(APP_AUTH_EVENT['forbidden'], response);
                            break;
                    }
                }
                // otherwise, default behaviour
                return $q.reject(response);
            }
        };
    }])


;

/**=========================================================
 * Module: src/js/module/service/route-helper.js:4
 * 检测路由是否存在, 以及方便注入依赖
 * @author: haili042
 * @time: 2016年4月1日 12:43:51
 =========================================================*/

App.provider('routeHelper', ['APP_REQUIRES', function(APP_REQUIRES) {
    'use strict';

    this.basepath = function (uri) {
        return 'app/views/' + uri;
    };

    this.resolveFor = function () {
        var args = arguments;
        return {
            deps: ['$ocLazyLoad', '$q', function ($oLL, $q) {
                var promise = $q.when(1)
            }]
        };
    };

    this.$get = function () {
        return {
            basepath: this.basepath
        };
    };
}]);
/**=========================================================
 * Module: src/js/module/service/session.js
 * session service
 * @author: haili042
 * @time: 2016年4月1日 12:43:51
 =========================================================*/

App.service('sessionService', function() {

    // 创建 session
    this.create = function (sessionId, userId, userRole) {
        this.id = sessionId;
        this.userId = userId;
        this.userRole = userRole;
    };

    // 注销session
    this.destroy = function() {
        this.id = null;
        this.userId = null;
        this.userRole = null;
    };
});