/**=========================================================
 * Module: src/js/app.js
 * 初始化程序
 * @author: haili042
 * @time: 2016年4月1日 12:46:06
 =========================================================*/

// 一个项目只有一个 ng-app
var App = angular.module('app', [
    'ui.router',
    'ngAnimate',
    'ngStorage',
    'ngCookies'
]);

// 这里的run方法只会在angular启动的时候运行一次。
App
    .run(function ($rootScope, $state, $stateParams, $window, $templateCache, $sessionStorage) {

        // 由于整个应用都会和路由打交道，所以这里把$state和$stateParams这两个对象放到$rootScope上，方便其它地方引用和注入。
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;

        $rootScope.app = {
            name: 'haili-ng-bstrp',
            title: 'Haili042 ng Admin系统',
            description: 'haili042 angular bootstrap admin',
            year: '2016',
            layout: {
                isFixed: true,
                isCollapsed: false,
                isBoxed: false,
                isRTL: false,
                horizontal: false,
                isFloat: false,
                asideHover: true,
                theme: null
            },
            useFullLayout: false,
            hiddenFooter: false,
            viewAnimation: 'ng-fadeInUp'
        };


        //
        //$rootScope.$storage = $sessionStorage.$default({
        //    user: null,
        //    token: null
        //});
        //console.log($rootScope.$storage);

        // 路由过滤器, 用来认证权限
        //$rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
        //
        //    console.log($rootScope.$storage);
        //
        //    // 如果是进入登录页面则允许
        //    if (toState.name === 'page.login') {
        //        return true;
        //    }
        //
        //    /*
        //     // 如果用户不存在
        //     if ($rootScope.$storage === undefined) {
        //
        //     // 取消跳转
        //     event.preventDefault();
        //
        //     // 跳转到登录页面
        //     $state.go('page.login');
        //     }
        //     */
        //
        //});
    })


    //.config(['$rootScope', function($rootScope) {
    //
    //}])
;


/**=========================================================
 * Module: src/js/module/config.js
 * 配置路由
 * @author: haili042
 * @time: 2016年4月1日 12:45:24
 =========================================================*/

App
    // 路由配置
    .config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        'use strict';

        // 配置无效路由, $urlRouterProvider 负责配置指定url之外的url请求
        $urlRouterProvider.otherwise('/app/home');

        // 路由配置
        // 注意这里采用的是ui-router这个路由，而不是ng原生的路由。ng原生的路由不能支持嵌套视图
        $stateProvider

            //
            // 组件都嵌套在父路由内
            // -----------------------------------
            .state('app', {
                url: '/app',
                abstract: true, // 表明此状态不能被显性激活，只能被子状态隐性激活(子状态激活同时, 父状态也激活)
                templateUrl: 'app/tpl/frame/layout.html' // 布局
            })

            // 子路由, 点标记法(推荐)
            .state('app.home', {
                url: '/home',
                templateUrl: 'app/tpl/home/home.html'
            })

            // examples
            // -----------------------------------
            .state('app.example-form', {
                url: '/example-form',
                templateUrl: 'app/tpl/example/example-form.html'
            })

            .state('app.example-form-masonry', {
                url: '/example-form-masonry',
                templateUrl: 'app/tpl/example/example-form-masonry.html'
            })

            .state('app.example-form-select', {
                url: '/example-form-select',
                templateUrl: 'app/tpl/example/example-form-select.html'
            })

            .state('app.example-chart', {
                url: '/example-chart',
                templateUrl: 'app/tpl/example/example-chart.html'
            })

            .state('app.example-table', {
                url: '/example-table',
                templateUrl: 'app/tpl/example/example-table.html'
            })

            .state('app.example-tree', {
                url: '/example-tree',
                templateUrl: 'app/tpl/example/example-tree.html'
            })

            //.state('app.example', {
            //    //url: '/{tpl: [0-9]{1,4}}', // 匹配数字
            //    url: '/{tpl: [a-zA-Z0-9_$]*}', // 匹配变量名
            //    views: {
            //        // @app 表示替换的是 app 状态下的匿名 ui-view
            //        'content@app': {
            //            templateUrl: function ($routeParams) {
            //                var tpl = $routeParams.tpl || 'example-form' ;
            //                return 'app/tpl/example/' + tpl + '.html';
            //            }
            //        }
            //    }
            //})

            // 单页路由
            // -----------------------------------
            .state('page', {
                url: '/page',
                abstract: true,
                templateUrl: 'app/tpl/page/page-holder.html'
            })
            .state('page.login', {
                url: '/login',
                title: "Login",
                templateUrl: 'app/tpl/page/login.html'
            })
            .state('page.register', {
                url: '/register',
                templateUrl: 'app/tpl/page/register.html'
            })
            .state('page.404', {
                url: '/404',
                templateUrl: 'app/tpl/page/404.html'
            })
        ;
    }])

    // 请求头配置
    .config(['$httpProvider', 'APP_HEADER', function($httpProvider, APP_HEADER) {

        var max_age = 'max-age=' + APP_HEADER['max-age'] || 0;

        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }

        // 设置缓存
        $httpProvider.defaults.headers.get['Cache-Control'] = max_age;
    }])

;
/**=========================================================
 * Module: src/js/module/constants.js
 * 定义全局变量, 调用的时候注入即可
 * @author: haili042
 * @time: 2016年4月1日 12:46:17
 =========================================================*/

App

    // 登录权限事件
    .constant('APP_AUTH_EVENT', {
        'loginSuccess':           'event:auth-login-success',
        'loginFailed':            'event:auth-login-failed',
        'logoutSuccess':          'event:auth-logout-success',
        'logoutFailed':           'event:auth-logout-failed',
        'sessionTimeout':         'event:auth-session-timeout',
        'noAuth':                 'event:auth-no-auth',         // 401 没有权限
        'forbidden':              'event:auth-forbidden'        // 403 服务器拒绝
    })

    // 角色权限
    .constant('APP_USER_ROLE', {
        all:                      '*',
        admin:                    'admin',
        editor:                   'editor',
        guest:                    'guest'
    })

    // 全局颜色
    .constant('APP_COLOR', {
        'primary':                '#5d9cec',
        'success':                '#27c24c',
        'info':                   '#23b7e5',
        'warning':                '#ff902b',
        'danger':                 '#f05050',
        'inverse':                '#131e26',
        'green':                  '#37bc9b',
        'pink':                   '#f532e5',
        'purple':                 '#7266ba',
        'dark':                   '#3a3f51',
        'yellow':                 '#fad732',
        'gray-darker':            '#232735',
        'gray-dark':              '#3a3f51',
        'gray':                   '#dde6e9',
        'gray-light':             '#e4eaec',
        'gray-lighter':           '#edf1f2'
    })

    // 媒体查询
    .constant('APP_MEDIAQUERY', {
        'desktopLG':             1200,
        'desktop':                992,
        'tablet':                 768,
        'mobile':                 480
    })

    // 请求响应头设置
    .constant('APP_HEADER', {
        'max-age':                 0
    })

    // 定义依赖的模块
    .constant('APP_REQUIRE', {
        // jquery 模块
        // ...

        // angular 模块
        modules: [
        ]
    })
;


/**=========================================================
 * Module: src/js/module/directive/filter/select-filter.js
 * select 过滤器, 用来格式化所选项的格式
 * @author: haili042
 * @time: 2016年4月15日 12:51:23
 =========================================================*/

App
    .filter('selectFilter', function() {

        // 该函数的参数以 selectFilter:arg1:arg2 的形式接收
        return function(input, textField) {
            input = input || {};
            var output = '';

            for (var k in input) {
                if (input.hasOwnProperty(k) && k !== 'length') {
                    output += (input[k][textField] || '') + ',';
                }
            }
            return output;
        };
    });
/**=========================================================
 * Module: src/js/module/service/auth.js
 * 用户权限service
 * @author: haili042
 * @time: 2016年4月1日 12:43:51
 =========================================================*/

/**
 * 依赖 HttpService service
 */
App
    .service('authService', ['$rootScope', 'httpBuffer', 'sessionService', function($rootScope, httpBuffer, sessionService) {
        'use strict';

        /**
         * Call this function to indicate that authentication was successfull and trigger a
         * retry of all deferred requests.
         * @param data an optional argument to pass on to $broadcast which may be useful for
         * example if you need to pass through details of the user that was logged in
         * @param configUpdater an optional transformation function that can modify the
         * requests that are retried after having logged in.  This can be used for example
         * to add an authentication token.  It must return the request.
         */
        this.loginConfirmed = function (data, configUpdater) {
            var updater = configUpdater || function(config) {return config;};
            $rootScope.$broadcast('event:auth-loginConfirmed', data);
            httpBuffer.retryAll(updater);
        };


        /**
         * Call this function to indicate that authentication should not proceed.
         * All deferred requests will be abandoned or rejected (if reason is provided).
         * @param data an optional argument to pass on to $broadcast.
         * @param reason if provided, the requests are rejected; abandoned otherwise.
         */
        this.loginCancelled = function(data, reason) {
            httpBuffer.rejectAll(reason);
            $rootScope.$broadcast('event:auth-loginCancelled', data);
        };

    }])
;

/**=========================================================
 * Module: src/js/module/service/http-buffer.js
 * 缓存http请求, 方便登录后重新访问原来页面, 批量发出请求
 * @author: haili042
 * @time: 2016年4月5日 09:07:08
 =========================================================*/

App.service('httpBuffer', ['$injector', function($injector) {
    'use strict';


    var buffer = [], // 缓存请求
        $http;       // 延迟初始化 $http service

    /**
     * @params config 是一个 http 请求信息对象
     * @params deferred 是一个 promise 对象
     * */
    function retryHttpRequest(config, deferred) {

        function successCallBack(response) {
            deferred.resolve(response);
        }

        function errorCallBack(response) {
            deferred.reject(response);
        }

        // 注入器注入 http 服务
        $http = $http || $injector.get('http');

        // 请求promise
        $http(config).then(successCallBack, errorCallBack);
    }


    /**
     * 增加http请求到buffer
     * @return {Number} 返回buffer新长度.
     */
    this.append = function (config, deferred) {
        return buffer.push({
            config: config,
            deferred: deferred
        });
    };

    /**
     * 拒绝所有请求, 清空buffer
     * */
    this.rejectAll = function (reason) {
        var i,
            len = buffer.length;

        if (reason) {
            for (i = 0; i < len; i++) {
                buffer[i].deferred.reject(reason);
            }
        }

        buffer = [];
    };

    /**
     * 尝试重新发起所有请求, 清空buffer
     * */
    this.retryAll = function(updater) {
        var i,
            len = buffer.length,
            cfg;

        for (i = 0; i < len; i++) {
            cfg = updater(buffer[i].config);

            if (cfg !== false) {
                retryHttpRequest(cfg, buffer[i].deferred);
            }
        }

        buffer = [];
    };

}]);

/**=========================================================
 * Module: src/js/module/service/interceptor.js
 * 拦截器
 * @author: haili042
 * @time: 2016年4月5日 09:44:13
 =========================================================*/

/**
 *
 通过实现 request 方法拦截请求:
 该方法会在 $http 发送请求道后台之前执行，因此你可以修改配置或做其他的操作。
 该方法接收请求配置对象(request configuration object)作为参数，然后必须返回配置对象或者 promise 。
 如果返回无效的配置对象或者 promise 则会被拒绝，导致 $http 调用失败。

 通过实现 response 方法拦截响应:
 该方法会在 $http 接收到从后台过来的响应之后执行，因此你可以修改响应或做其他操作。
 该方法接收响应对象(response object)作为参数，然后必须返回响应对象或者 promise。
 响应对象包括了请求配置(request configuration)，头(headers)，状态(status)和从后台过来的数据(data)。
 如果返回无效的响应对象或者 promise 会被拒绝，导致 $http 调用失败。

 通过实现 requestError 方法拦截请求异常:
 有时候一个请求发送失败或者被拦截器拒绝了。请求异常拦截器会俘获那些被上一个请求拦截器中断的请求。
 它可以用来恢复请求或者有时可以用来撤销请求之前所做的配置，比如说关闭进度条，激活按钮和输入框什么之类的。

 通过实现 responseError 方法拦截响应异常:
 有时候我们后台调用失败了。也有可能它被一个请求拦截器拒绝了，或者被上一个响应拦截器中断了。
 在这种情况下，响应异常拦截器可以帮助我们恢复后台调用。

 */

App
    // 拦截器定义
    .factory('authInterceptor', ['$rootScope', '$q', 'httpBuffer', 'APP_AUTH_EVENT',
        function ($rootScope, $q, httpBuffer, APP_AUTH_EVENT) {
        return {
            /**
             * 请求之前执行
             * */
            request: function(config) {
                //config.headers['TOKEN'] = $rootScope.sessionInfo.token;
                return config; // 必须返回 promise 对象或 config 对象
            },


            /**
             * 响应错误
             * */
            responseError: function (response) {
                var config = response.config || {};
                if (!config.ignoreAuthModule) {

                    switch (response.status) {

                        /**
                         * 401 没有权限 - user not login
                         * */
                        case 401:
                            var deferred = $q.defer();

                            // 当前请求添加到 buffer
                            var bufferLength = httpBuffer.append(config, deferred);

                            // 只有一个的情况, 即当前请求
                            if (bufferLength === 1) {
                                // 广播没有权限事件
                                $rootScope.$broadcast(APP_AUTH_EVENT.noAuth, response);
                            }
                            return deferred.promise;

                        /**
                         * 403 服务器拒绝 — The user is logged in but isn’t allowed access
                         * */
                        case 403:
                            // 广播事件
                            $rootScope.$broadcast(APP_AUTH_EVENT.forbidden, response);
                            break;
                    }
                }
                // otherwise, default behaviour
                return $q.reject(response);
            }
        };
    }])


;

/**=========================================================
 * Module: src/js/module/service/route-helper.js:4
 * 检测路由是否存在, 以及方便注入依赖
 * @author: haili042
 * @time: 2016年4月1日 12:43:51
 =========================================================*/

App.provider('routeHelper', ['APP_REQUIRE', function(APP_REQUIRE) {
    'use strict';

    this.basepath = function (uri) {
        return 'app/views/' + uri;
    };

    this.resolveFor = function () {
        var args = arguments;
        return {
            deps: ['$ocLazyLoad', '$q', function ($oLL, $q) {
                var promise = $q.when(1);
            }]
        };
    };

    this.$get = function () {
        return {
            basepath: this.basepath
        };
    };
}]);
/**=========================================================
 * Module: src/js/module/service/session.js
 * session service
 * @author: haili042
 * @time: 2016年4月1日 12:43:51
 =========================================================*/

App.factory('sessionService', function() {

    'use strict';
    var id,
        userId,
        userRole;
    
    // 创建 session
    function createSession(sid, uid, ur) {
        id = sid;
        userId = uid;
        userRole = ur;
    }

    // 注销session
    function destroySession() {
        id = null;
        userId = null;
        userRole = null;
    }

    // 获取session
    function getSession() {
        return {
            id: id,
            userId: userId,
            userRole: userRole
        };
    }
    
    return {
        createSession: createSession,
        destroySession: destroySession,
        getSession: getSession
    };
})
;
/**=========================================================
 * Module: utils.js
 * Utility library to use across the theme
 =========================================================*/

App.service('Utils', ["$window", "APP_MEDIAQUERY", function($window, APP_MEDIAQUERY) {
    'use strict';

    var $html = angular.element("html"),
        $win  = angular.element($window),
        $body = angular.element('body');

    return {
        // DETECTION
        support: {
            transition: (function() {
                var transitionEnd = (function() {

                    var element = document.body || document.documentElement,
                        transEndEventNames = {
                            WebkitTransition: 'webkitTransitionEnd',
                            MozTransition: 'transitionend',
                            OTransition: 'oTransitionEnd otransitionend',
                            transition: 'transitionend'
                        }, name;

                    for (name in transEndEventNames) {
                        if (element.style[name] !== undefined) return transEndEventNames[name];
                    }
                }());

                return transitionEnd && { end: transitionEnd };
            })(),
            animation: (function() {

                var animationEnd = (function() {

                    var element = document.body || document.documentElement,
                        animEndEventNames = {
                            WebkitAnimation: 'webkitAnimationEnd',
                            MozAnimation: 'animationend',
                            OAnimation: 'oAnimationEnd oanimationend',
                            animation: 'animationend'
                        }, name;

                    for (name in animEndEventNames) {
                        if (element.style[name] !== undefined) return animEndEventNames[name];
                    }
                }());

                return animationEnd && { end: animationEnd };
            })(),
            requestAnimationFrame: window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            function(callback){ window.setTimeout(callback, 1000/60); },
            touch: (
            ('ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/)) ||
            (window.DocumentTouch && document instanceof window.DocumentTouch)  ||
            (window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 0) || //IE 10
            (window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 0) || //IE >=11
            false
            ),
            mutationobserver: (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null)
        },
        // UTILITIES
        isInView: function(element, options) {

            var $element = $(element);

            if (!$element.is(':visible')) {
                return false;
            }

            var window_left = $win.scrollLeft(),
                window_top  = $win.scrollTop(),
                offset      = $element.offset(),
                left        = offset.left,
                top         = offset.top;

            options = $.extend({topoffset:0, leftoffset:0}, options);

            if (top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() &&
                left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width()) {
                return true;
            } else {
                return false;
            }
        },
        langdirection: $html.attr("dir") == "rtl" ? "right" : "left",
        isTouch: function () {
            return $html.hasClass('touch');
        },
        isSidebarCollapsed: function () {
            return $body.hasClass('aside-collapsed');
        },
        isSidebarToggled: function () {
            return $body.hasClass('aside-toggled');
        },
        isMobile: function () {
            return $win.width() < APP_MEDIAQUERY.tablet;
        }
    };
}]);
/**=========================================================
 * Module: src/js/module/service/widget-get-data.js
 * 组件获取数据的服务
 * @author: haili042
 * @time: 2016年4月13日 18:05:07
 =========================================================*/

App
    .service('widgetService', ['$q', '$http', function ($q, $http) {
        'use strict';

        // 默认参数
        var config, // 合并后的配置
            deferred = $q.defer(),
            promise = deferred.promise,
            queryParams = {},
            that = this
            ;

        // 获取配置
        this.concatConfig = function (defConf, newConf) {
            // jquery 深拷贝
            config = $.extend(true, newConf, defConf, newConf);
            return config;
        };

        // 转移指令到指定元素上
        this.transferAttr = function (fromEle, toEle, attrs, type, remainFromEleAttr) {
            if (type === 'class') {
                toEle.addClass(attrs.class);
                if (!remainFromEleAttr) {
                    fromEle.removeClass(attrs.class);
                }
            }
            return that;
        };

        // 获取 promise 对象
        this.getPromise = function (config) {

            var http = httpService(config);
            http && http.success(function (data, status, headers, conf) {
                deferred.resolve(data, status, headers, conf);
            }).error(function (data, status, headers, conf) {
                deferred.reject(data, status, headers, conf);
            });

            return promise;
        };

        // 获取数据
        this.getData = function (config, callback, errorCallback) {

            var http = httpService(config);
            http && http.success(function (data, status, headers, conf) {
                callback && callback(data, status, headers, conf);
            }).error(function (data, status, headers, conf) {
                errorCallback && errorCallback(data, status, headers, conf);
            });
            return that;
        };

        // 请求公用方法
        function httpService(config) {
            if (!config) {
                throw new Error('首先要设置配置');
                return false;
            }

            // 有url 则发送请求, 否则使用 data 属性
            if (config.url) {

                var http = $http({
                    method: 'get',
                    url: config.url,
                    params: queryParams, // 参数转成字符串放在 url 后面
                    cache: false
                }).success(function (data, status, headers, conf) {
                    config.onLoadSuccess && config.onLoadSuccess(data);
                }).error(function (data, status, headers, conf) {
                    config.onLoadError && config.onLoadError(data);
                });
                return http;
            } else {
                return false;
            }

        }

    }])
;
/**=========================================================
 * Module: src/js/module/controller/chart-ctrl.js
 * chart控制器
 * @author: haili042
 * @time: 2016年4月1日 11:09:41
 =========================================================*/

App.controller('ChartCtrl', ['$http', '$scope', '$state', '$rootScope',
    function ($http, $scope, $state, $rootScope) {

        // 线图
        $scope.lineChart = {
            title: {
                text: 'Monthly Average Temperature',
                x: -20 //center
            },
            subtitle: {
                text: 'Source: WorldClimate.com',
                x: -20
            },
            xAxis: {
                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            },
            yAxis: {
                title: {
                    text: 'Temperature (°C)'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                valueSuffix: '°C'
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                borderWidth: 0
            },
            series: [{
                name: 'Tokyo',
                data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
            }, {
                name: 'New York',
                data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
            }, {
                name: 'Berlin',
                data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
            }, {
                name: 'London',
                data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
            }]
        };

        // 饼图
        $scope.ovalChart = {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false
            },
            title: {
                text: 'Browser<br>shares',
                align: 'center',
                verticalAlign: 'middle',
                y: -50
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false,
                        distance: -50,
                        style: {
                            fontWeight: 'bold',
                            fontSize: '14',
                            color: 'black',
                            textShadow: '0px 0px 0px black'
                        }
                    },
                    showInLegend: true,
                    point:{
                        events:{
                            legendItemClick:function(){
                                this.select();
                                this.show();
                            }
                        }
                    }
                }
            },
            series: [{
                type: 'pie',
                name: 'Browser share',
                innerSize: '50%',
                data: [
                    ['Firefox',   45.0],
                    ['IE',       26.8],
                    {
                        name: 'Chrome',
                        y: 12.8,
                        sliced: true,
                        selected: true
                    },
                    ['Safari',    8.5],
                    ['Opera',     6.2],
                    ['Others',   0.7]
                ]
            }]
        };

        // 柱状图
        $scope.barChart = {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Monthly Average Rainfall'
            },
            subtitle: {
                text: 'Source: WorldClimate.com'
            },
            xAxis: {
                categories: [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Rainfall (mm)'
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: [{
                name: 'Tokyo',
                data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]

            }, {
                name: 'New York',
                data: [83.6, 78.8, 98.5, 93.4, 106.0, 84.5, 105.0, 104.3, 91.2, 83.5, 106.6, 92.3]

            }, {
                name: 'London',
                data: [48.9, 38.8, 39.3, 41.4, 47.0, 48.3, 59.0, 59.6, 52.4, 65.2, 59.3, 51.2]

            }, {
                name: 'Berlin',
                data: [42.4, 33.2, 34.5, 39.7, 52.6, 75.5, 57.4, 60.4, 47.6, 39.1, 46.8, 51.1]

            }]
        };

        // 垂直柱状图
        $scope.verticalBarChart = {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Stacked bar chart'
            },
            xAxis: {
                categories: ['Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas']
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Total fruit consumption'
                }
            },
            legend: {
                reversed: true
            },
            plotOptions: {
                series: {
                    stacking: 'normal'
                }
            },
            series: [{
                name: 'John',
                data: [5, 3, 4, 7, 2]
            }, {
                name: 'Jane',
                data: [2, 2, 3, 2, 1]
            }, {
                name: 'Joe',
                data: [3, 4, 4, 2, 5]
            }]
        };

    }]);
/**=========================================================
 * Module: src/js/module/controller/example/select-ctrl.js
 * select 控制器
 * @author: haili042
 * @time: 2016年4月13日 16:48:27
 =========================================================*/

App
    .controller('SelectCtrl', ['$http', '$scope', '$state', '$rootScope',
        function ($http, $scope, $state, $rootScope) {

            $scope.config1 = {
                url: '/test/data/select.json',
                textField: 'text',
                editable: true,
                //data: [
                //    {
                //        "id": 1,
                //        "text": "Java",
                //        "desc": "Write once, run anywhere"
                //    },
                //    {
                //        "id": 2,
                //        "text": "C#",
                //        "desc": "One of the programming languages designed for the Common Language Infrastructure"
                //    },
                //    {
                //        "id": 3,
                //        "text": "Ruby",
                //        "selected": true,
                //        "desc": "A dynamic, reflective, general-purpose object-oriented programming language"
                //    },
                //    {
                //        "id": 4,
                //        "text": "Perl",
                //        "desc": "A high-level, general-purpose, interpreted, dynamic programming language"
                //    },
                //    {
                //        "id": 5,
                //        "text": "Basic",
                //        "desc": "A family of general-purpose, high-level programming languages"
                //    }
                //],
                onSelect: function(index, selected, data) {
                    var c = this.getValue();
                    console.log(c);
                }
            };


            $scope.seleted = '';
            $scope.animals = [
                {
                    id: '00001',
                    name: '猫',
                    sex: '雌',
                    food: '鱼',
                    favor: '玩球'
                },
                {
                    id: '00002',
                    name: '狗',
                    sex: '雄',
                    food: '骨头',
                    favor: '接盘子'
                },
                {
                    id: '00003',
                    name: '兔',
                    sex: '雌',
                    food: '胡萝卜',
                    favor: '刨洞'
                },
                {
                    id: '00004',
                    name: '狮',
                    sex: '雄',
                    food: '肉',
                    favor: '猎物'
                }
            ];

        }])
;

/**=========================================================
 * Module: src/js/module/controller/example/table-ctrl.js
 * table控制器
 * @author: haili042
 * @time: 2016年4月10日 22:54:16
 =========================================================*/

App
    .controller('TableCtrl', ['$http', '$scope', '$state', '$rootScope',
    function ($http, $scope, $state, $rootScope) {

        $scope.tableConfig = {
            checkbox: true,
            title: 'test table',
            border: true,
            pagination: true,
            url: '/test/data/table.json',
            queryParams: {
                name: 'xiaoming',
                age: '25'
            },
            columns: [
                {field:'productid',title:'Code',width:100},
                {field:'productname',title:'Name',width:100},
                {field:'unitcost',title:'Name',width:100},
                {field:'status',title:'Name',width:100},
                {field:'listprice',title:'Name',width:100},
                {field:'attr1',title:'Name',width:100},
                {field:'itemid',title:'Price',width:100,align:'right'}
            ],
            onLoadSuccess: function(data) {
            }
        };

    }])
;

/**=========================================================
 * Module: src/js/module/controller/example/tree-ctrl.js
 * tree 控制器
 * @author: haili042
 * @time: 2016年4月13日 15:13:46
 =========================================================*/

App
    .controller('TreeCtrl', ['$http', '$scope', '$state', '$rootScope',
    function ($http, $scope, $state, $rootScope) {

        $scope.tableConfig = {
            url: '/test/data/tree.json'
        };


    }])
;

/**=========================================================
 * Module: src/js/module/controller/sidebar-left-ctrl.js
 * 菜单控制器
 * @author: haili042
 * @time: 2016年4月1日 11:09:41
 =========================================================*/

App.controller('SideBarLeftCtrl', ['$http', '$scope', '$state', '$rootScope', '$timeout', 'Utils',
    function ($http, $scope, $state, $rootScope, $timeout, Utils) {


        var collapseList = [];

        // demo: when switch from collapse to hover, close all items
        $rootScope.$watch('app.layout.asideHover', function(oldVal, newVal){
            if ( newVal === false && oldVal === true) {
                closeAllBut(-1);
            }
        });

        // Check item and children active state
        var isActive = function(item) {

            if(!item) return;

            if( !item.sref || item.sref == '#') {
                var foundActive = false;
                angular.forEach(item.submenu, function(value, key) {
                    if(isActive(value)) foundActive = true;
                });
                return foundActive;
            }
            else
                return $state.is(item.sref) || $state.includes(item.sref);
        };

        // Load menu from json file
        // -----------------------------------

        $scope.getMenuItemPropClasses = function(item) {
            return (item.heading ? 'nav-heading' : '') +
                (isActive(item) ? ' active' : '') ;
        };

        $scope.loadSidebarMenu = function() {

            var menuJson = '/test/data/menu.json',
                menuURL  = menuJson + '?v=' + (new Date().getTime()); // jumps cache
            $http.get(menuURL)
                .success(function(items) {
                    $scope.menuItems = items;
                })
                .error(function(data, status, headers, config) {
                    alert('Failure loading menu');
                });
        };

        $scope.loadSidebarMenu();

        // Handle sidebar collapse items
        // -----------------------------------

        $scope.addCollapse = function($index, item) {
            collapseList[$index] = $rootScope.app.layout.asideHover ? true : !isActive(item);
        };

        $scope.isCollapse = function($index) {
            return (collapseList[$index]);
        };

        $scope.toggleCollapse = function($index, isParentItem) {


            // collapsed sidebar doesn't toggle drodopwn
            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) return true;

            // make sure the item index exists
            if( angular.isDefined( collapseList[$index] ) ) {
                if ( ! $scope.lastEventFromChild ) {
                    collapseList[$index] = !collapseList[$index];
                    closeAllBut($index);
                }
            }
            else if ( isParentItem ) {
                closeAllBut(-1);
            }

            $scope.lastEventFromChild = isChild($index);

            return true;

        };

        function closeAllBut(index) {
            index += '';
            for(var i in collapseList) {
                if(index < 0 || index.indexOf(i) < 0)
                    collapseList[i] = true;
            }
        }

        function isChild($index) {
            return (typeof $index === 'string') && !($index.indexOf('-') < 0);
        }
    }]);
/**=========================================================
 * Module: src/js/module/controller/sidebar-left-ctrl.js
 * 菜单控制器
 * @author: haili042
 * @time: 2016年4月1日 11:09:41
 =========================================================*/

App.controller('HomeCtrl', ['$http', '$scope', '$state', '$rootScope', '$timeout', 'Utils',
    function ($http, $scope, $state, $rootScope, $timeout, Utils) {
        $scope.rowMessagerConfig = {
            rightBlock: {
                title: '2048',
                msg: '新增工单数量'
            }
        };
        // 修改了样式
        $scope.rowMessagerConfig2 = {
            leftBlock: {
                icon: 'fa fa-book',
                style: {
                    'background-color': '#d3564f'
                }
            },
            rightBlock: {
                title: '4096',
                msg: '新增工单数量',
                style: {
                    'background-color': '#fff',
                    'color': '#444'
                }
            }
        };
        // 使用了默认参数
        $scope.rowMessagerConfig3 = {
            leftBlock: {
                icon: 'fa fa-desktop',
                style: {
                    'background-color': '#339822'
                }
            },
            rightBlock: {
                title: '20481',
                msg: '新增工单数量',
                style: {
                    'background-color': '#543562',
                    'font-size': '16px'
                }
            }
        };

        $scope.chartconfig = {
            chart: {
                animation: true
            },
            credits: {
                enabled: false
            },
            title: {
                text: 'Monthly Average Temperature',
                x: -20 //center
            },
            subtitle: {
                text: 'Source: WorldClimate.com',
                x: -20
            },
            xAxis: {
                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            },
            yAxis: {
                title: {
                    text: 'Temperature (°C)'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                valueSuffix: '°C'
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                borderWidth: 0
            },
            series: [{
                name: 'Tokyo',
                data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
            }, {
                name: 'New York',
                data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
            }, {
                name: 'Berlin',
                data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
            }, {
                name: 'London',
                data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
            }]
        };
    }]);
/**=========================================================
 * Module: src/js/module/controller/login-ctrl.js:25
 * 登录控制器
 * @author: haili042
 * @time: 2016年4月1日 12:45:09
 =========================================================*/

App.controller('LoginCtrl', ['$http', '$state', '$scope', '$rootScope', '$localStorage', 'APP_AUTH_EVENT',
    function($http, $state, $scope, $rootScope, $sessionStorage, APP_AUTH_EVENT) {

        $scope.name = '';

        $scope.login = function () {
            var url = '',
                params = {
                    user: $scope.account.user,
                    psw: $scope.account.psw
                };

            // 测试用的
            if ($scope.account.remember) {
                $scope.authMsg = '帐号不存在';
                return false;
            }

            if ($scope.loginForm.$valid) { // 校验表单

                $rootScope.$storage = $sessionStorage.$default({
                    user: $scope.account.user,
                    token: new Date().getTime()
                });

                //$rootScope.sessionInfo.user = $scope.account.user;
                //$rootScope.sessionInfo.token = new Date().getTime(); // 这个也是后台获取

                $state.go('app.home');

                $http.post(url, params)
                    .then(function (res) {
                        // TODO ...
                        $rootScope.$broadcast(APP_AUTH_EVENT.loginSuccess);
                    }, function () {
                        // 失败了..
                        // TODO ...
                        // 身份认证会影响整个应用, 所以需要广播事件
                        $rootScope.$broadcast(APP_AUTH_EVENT.loginFailed);
                    });
            } else {
                $scope.loginForm.account_user.$dirty = true;
                $scope.loginForm.account_psw.$dirty = true;
            }

        };
}]);
/**=========================================================
 * Module: sidebar.js
 * Wraps the sidebar and handles collapsed state
 =========================================================*/

App.directive('sidebar', ['$rootScope', '$window', 'Utils', function($rootScope, $window, Utils) {

    var $win  = $($window);
    var $body = $('body');
    var $scope;
    var $sidebar;
    var currentState = $rootScope.$state.current.name;

    return {
        restrict: 'EA',
        template: '',
        transclude: true,
        replace: true,
        link: function(scope, element, attrs) {

            $scope   = scope;
            $sidebar = element;

            var eventName = Utils.isTouch() ? 'click' : 'mouseenter' ;
            var subNav = $();
            $sidebar.on( eventName, '.nav > li', function() {

                if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) {

                    subNav.trigger('mouseleave');
                    subNav = toggleMenuItem( $(this) );

                    // Used to detect click and touch events outside the sidebar
                    sidebarAddBackdrop();

                }

            });

            scope.$on('closeSidebarMenu', function() {
                removeFloatingNav();
            });

            // Normalize state when resize to mobile
            $win.on('resize', function() {
                if( ! Utils.isMobile() )
                    $body.removeClass('aside-toggled');
            });

            // Adjustment on route changes
            $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
                currentState = toState.name;
                // Hide sidebar automatically on mobile
                $('body.aside-toggled').removeClass('aside-toggled');

                $rootScope.$broadcast('closeSidebarMenu');
            });

            // Allows to close
            if ( angular.isDefined(attrs.sidebarAnyclickClose) ) {

                $('.wrapper').on('click.sidebar', function(e){
                    // don't check if sidebar not visible
                    if( ! $body.hasClass('aside-toggled')) return;

                    // if not child of sidebar
                    if( ! $(e.target).parents('.aside').length ) {
                        $body.removeClass('aside-toggled');
                    }

                });
            }

        }
    };

    function sidebarAddBackdrop() {
        var $backdrop = $('<div/>', { 'class': 'dropdown-backdrop'} );
        $backdrop.insertAfter('.aside-inner').on("click mouseenter", function () {
            removeFloatingNav();
        });
    }

    // Open the collapse sidebar submenu items when on touch devices
    // - desktop only opens on hover
    function toggleTouchItem($element){
        $element
            .siblings('li')
            .removeClass('open')
            .end()
            .toggleClass('open');
    }

    // Handles hover to open items under collapsed menu
    // -----------------------------------
    function toggleMenuItem($listItem) {

        removeFloatingNav();

        var ul = $listItem.children('ul');

        if( !ul.length ) return $();
        if( $listItem.hasClass('open') ) {
            toggleTouchItem($listItem);
            return $();
        }

        var $aside = $('.aside');
        var $asideInner = $('.aside-inner'); // for top offset calculation
        // float aside uses extra padding on aside
        var mar = parseInt( $asideInner.css('padding-top'), 0) + parseInt( $aside.css('padding-top'), 0);
        var subNav = ul.clone().appendTo( $aside );

        toggleTouchItem($listItem);

        var itemTop = ($listItem.position().top + mar) - $sidebar.scrollTop();
        var vwHeight = $win.height();

        subNav
            .addClass('nav-floating')
            .css({
                position: $scope.app.layout.isFixed ? 'fixed' : 'absolute',
                top:      itemTop,
                bottom:   (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'
            });

        subNav.on('mouseleave', function() {
            toggleTouchItem($listItem);
            subNav.remove();
        });

        return subNav;
    }

    function removeFloatingNav() {
        $('.dropdown-backdrop').remove();
        $('.sidebar-subnav.nav-floating').remove();
        $('.sidebar li.open').removeClass('open');
    }

}]);
/**=========================================================
 * Module: src/js/module/directive/chart-dire.js
 * chart指令, 使用了基于 jquery 的 highchart
 * @author: haili042
 * @time: 2016年4月9日 17:39:30
 =========================================================*/

App.directive('widgetChart', function () {

    return {
        restrict: "EA",
        scope: {
            config: "=" // 注意要小写, 因为 html 不识别大小写
        },
        link: function ($scope, $elem, $attrs) {

            var defaultConfig = {
                    chart: {
                        animation: true
                    },
                    credits: {
                        enabled: true,
                        text: 'haili angular bootstrap admin'
                    }
                }, // 默认参数

                newConfig = $scope.config // 传进来的参数
                ;

            // jquery 深拷贝
            $scope.config = $.extend(true, {}, defaultConfig, newConfig);

            try {
                $elem.highcharts($scope.config);
            } catch (e) {
                console.log("error in creating chart :" + e);
            }
        }
    };

});
/**=========================================================
 * Module: src/js/module/directive/widget/form-element.js
 * 表单元素指令
 * @author: haili042
 * @time: 2016年4月11日 14:38:41
 =========================================================*/

App

    // 单选框
    .directive('widgetCheckbox', function () {
        return {
            restrict: 'EA',
            scope: {
                checked: '='
            },
            replace: true,
            templateUrl: '/app/tpl/widget/form-checkbox.html',

            link: function ($scope, $elem, $attr) {

                //var checkboxEle = $elem.find('input[type=checkbox]');
                //
                //// 表单元素必备
                //['name', 'checked'].forEach(function (k, v) {
                //    if ($attr[k]) {
                //        checkboxEle.attr(k, $attr[k]);
                //        $elem.removeAttr(k);
                //    }
                //});

                //checkboxEle.on('click', function (e) {
                //    e.stopPropagation();
                //
                //    $scope.checked = !$scope.checked;
                //    $scope.$emit('widget-checkbox:checked', $scope.checked);
                //});

                $elem.on('change', function (e) {

                    $scope.$apply(function () {
                        $scope.checked = !$scope.checked;

                    });
                });

                //$scope.$on('widget-checkbox:checking', function(event, data) {
                //    $scope.checked = data;
                //});
                //
                //$scope.$watch('checked', function (oldVal, newVal) {
                //    //console.log(oldVal + ', ' + newVal);
                //    $scope.$emit('widget-checkbox:checked', $scope.checked);
                //
                //});
            }
        };
    })

    // 开关
    .directive('widgetSwitch', function () {
        return {
            restrict: 'EA',
            scope: {
                checked: '='
            },
            replace: true,
            templateUrl: '/app/tpl/widget/form-switch.html',

            link: function ($scope, $elem, $attr) {

                var checkboxEle = $elem.find('input[type=checkbox]');

                // 表单元素必备
                ['name', 'checked'].forEach(function (k, v) {
                    if ($attr[k]) {
                        checkboxEle.attr(k, $attr[k]);
                        $elem.removeAttr(k);
                    }
                });

            }
        };
    })

    // 复选框
    .directive('widgetRadio', function () {
        return {
            restrict: 'EA',
            scope: {
                checked: '='
            },
            replace: true,
            templateUrl: '/app/tpl/widget/form-radio.html',

            link: function ($scope, $elem, $attr) {

                var checkboxEle = $elem.find('input[type=radio]');

                // 表单元素必备
                ['name', 'checked'].forEach(function (k, v) {
                    if ($attr[k]) {
                        checkboxEle.attr(k, $attr[k]);
                        $elem.removeAttr(k);
                    }
                });
            }
        };
    })
;
/**=========================================================
 * Module: src/js/module/directive/loading-icon.js
 * loading 菊花 指令
 * @author: haili042
 * @time: 2016年4月17日 11:14:19
 =========================================================*/

App
    // 基本
    .directive('widgetLoading', function() {
        return {
            restrict: 'EA',
            link: function($scope, $elem, $attr) {

            }
        };
    })

    // 形状1
    // 因为限制类型那个为class, 所以命名不要名为 widget-loading-rotate, 防止循环调用
    .directive('rotate', function() {
        return {
            restrict: 'C',
            require: '^widgetLoading',
            template:
                '<div class="widget-loading">' +
                    '<div class="mask"></div>' +
                    '<div class="icon-wrap">' +
                        '<div></div>' +
                        '<div></div>' +
                        '<div></div>' +
                        '<div></div>' +
                        '<div></div>' +
                        '<div></div>' +
                        '<div></div>' +
                        '<div></div>' +
                    '</div>' +
                '</div>',
            link: function($scope, $elem, $attr) {

            }
        };
    })

    // 形状2
    .directive('oval', function() {
        return {
            restrict: 'C',
            require: '^widgetLoading',
            template:
                '<div class="widget-loading-oval">' +
                    '<div class="mask"></div>' +
                    '<div class="icon-wrap"></div>' +
                '</div>'
        };
    })
;
/**=========================================================
 * Module: src/js/module/directive/dire-panel.js
 * panel 指令
 * @author: haili042
 * @time: 2016年4月10日 14:20:04
 =========================================================*/

App
    .directive('widgetPanel', function () {

        return {
            restrict: "EA",
            transclude: true, // 替换位置
            scope: {
                title: '@',
                minable: '=', // 是否可以最小化
                closeable: '=', // 是否可以关闭
                responsive: '=' // 是否是响应式
            },
            templateUrl: '/app/tpl/widget/panel.html',

            controller: function ($scope, $element, $attrs, $transclude) {
                /**
                 * controller 最先执行, 适用于指令之间的交互, 为其他指令提供API
                 * compile 和 link 同时存在, 则执行 compile , 不执行 link, 建议使用 link
                 * link中 进行 dom 事件绑定, 数据绑定
                 * */

                // 供子指令调用
                this.addFooter = function (element) {
                    $element.find('.panel').append(element);
                };

            },

            link: function ($scope, $elem, $attrs) {
                // 定义组件的默认行为
                // -----------------------

                // 默认为展开
                $scope.isHide = false;

                // 展开 / 收起
                $scope.toggle = function () {
                    $scope.isHide = !$scope.isHide;
                    $scope.icon = $scope.isHide ? 'fa fa-plus' : 'fa fa-minus';
                };

                // 关闭
                $scope.close = function () {
                    $elem.remove();
                };

            }
        };
    })

    // 子控制器
    .directive('widgetPanelFooter', function () {
        return {
            require: '^widgetPanel', // 依赖父控制器
            restrict: 'EA',
            transclude: true,
            template: '<div class="panel-footer" ng-transclude=""></div>',

            // 只有依赖了父指令, 才有 superCtrl 参数
            link: function ($scope, $elem, $attrs, $superCtrl) {

                // 调用父指令控制器
                $superCtrl.addFooter($elem);
            }
        };
    })
;
/**=========================================================
 * Module: src/js/module/directive/row-messager-dire.js
 * row-messager-widget 组件指令
 * @author: haili042
 * @time: 2016年4月9日 21:57:42
 =========================================================*/

/**
 * 指令用驼峰命名
 * 而html 使用指令则用 '-' 分割: 如 rowMessager  <row-messager>
 * */
App.directive('widgetRowMessager', function () {
    return {
        restrict: 'EA',
        scope: {
            config: '='
        },
        templateUrl: '/app/tpl/widget/row-messager.html',
        link: function ($scope, $elem, $attr) {
            /**
             * controller 最先执行, 适用于指令之间的交互, 为其他指令提供API
             * compile 和 link 同时存在, 则执行 compile , 不执行 link, 建议使用 link
             * link中 进行 dom 事件绑定, 数据绑定
             * */

            // 默认参数
            var defaultConfig = {
                    leftBlock: {
                        icon: 'fa fa-cloud',
                        style: {}
                    },
                    rightBlock: {
                        title: '',
                        msg: '',
                        style: {}
                    }
                },

                newConfig = $scope.config // 传进来的参数
                ;


            // jquery 深拷贝
            $scope.config = $.extend(true, {}, defaultConfig, newConfig);
        }
    };
});
/**=========================================================
 * Module: src/js/module/directive/widget/select.js
 * select 指令
 * @author: haili042
 * @time: 2016年4月13日 17:19:22
 =========================================================*/

App

    // 复选框
    .directive('widgetSelect', ['$q', '$http', 'widgetService', function ($q, $http, widgetService) {
        return {
            restrict: 'EA',
            scope: {
                config: '='
            },

            templateUrl: '/app/tpl/widget/form-select.html',

            controller: function ($scope) {

                // 选中一条
                this.select = function (index, selected, data) {
                    $scope.select(index, selected, data);
                };

                // 点击时触发
                this.onSelect = function (index, selected, data) {
                    $scope.config.onSelect && $scope.config.onSelect(index, selected, data);
                };

            },
            link: function ($scope, $elem, $attr) {

                // 默认参数
                var defaultConfig = {
                        selectedItems: {
                            length: 0
                        }, // 已选的项初始化
                        getSelect: function () {

                        }
                    },
                    newConfig = $scope.config, // 传进来的参数
                    inputerElem = $elem.find('input.inputer')
                    ;

                // 转移类到输入元素中...
                widgetService.transferAttr($elem, inputerElem, $attr, 'class');

                $scope.config = widgetService.concatConfig(defaultConfig, newConfig);

                // 等待请求返回的数据
                widgetService.getData($scope.config,
                    function (data) {
                        $scope.config.data = data;
                        $scope.loaded = true;

                    });


                // 属性设置
                // ------------------------------


                // 事件绑定
                // ------------------------------

                // 打开, 关闭下拉框
                $scope.toggle = function () {
                    $scope.open = !$scope.open;
                };

                // 全选
                $scope.selectAll = function (data) {
                    $scope.$broadcast('widget-select:selectAll', data);
                };

                // 选中一条
                $scope.select = function (index, selected, data) {

                    if (!$scope.config.selectedItems[index]) {
                        $scope.config.selectedItems[index] = data;
                        $scope.config.selectedItems.length++;
                    } else if(!selected) {
                        delete $scope.config.selectedItems[index];
                        $scope.config.selectedItems.length--;
                    }
                };

                //// 搜索文本
                $scope.config.getValue = function () {
                    var output = '',
                        input = $scope.config.selectedItems,
                        textField = $scope.config.textField;
                    for (var k in input) {
                        if (input.hasOwnProperty(k) && k !== 'length') {
                            output += (input[k][textField] || '') + ',';
                        }
                    }
                    return output;
                };
            }
        };
    }])

    .directive('widgetSelectItem', function () {
        return {
            restrict: 'EA',
            require: '^widgetSelect',
            scope: {
                index: '=',
                data: '='
            },
            template:
            '<li>' +
            '<a ng-class="{\'selected\': selected}">' +
            '<span>{{data.text}}</span>' +
            '<i class="fa" ng-class="{\'fa-check\': selected}"></i>' +
            '</a>' +
            '</li>',

            link: function ($scope, $elem, $attr, $superCtrl) {

                //// 点击事件
                //$elem.click(function (e) {
                //    $scope.selected = !$scope.selected;
                //    $scope.$apply(); // 强制进入 $digest 循环
                //});
                //
                //// 全选事件
                //$scope.$on('widget-select:selectAll', function(event, data) {
                //    $scope.selected = data;
                //});
                //
                //// 监听值的变化
                //$scope.$watch('selected', function(oldV, newV) {
                //    var item = {
                //        index: $scope.index,
                //        selected: $scope.selected,
                //        data: $scope.data
                //    };
                //
                //    // 添加到已选对象
                //    $superCtrl.select($scope.index, item);
                //
                //    // 点击时触发
                //    $superCtrl.onSelect(item);
                //});

                // 点击事件
                $elem.on('click', function (e) {
                    // 强制进入 $digest 循环
                    $scope.$apply(function () {
                        $scope.selected = !$scope.selected;
                        changeState($scope.selected);
                    });
                });

                // 全选
                $scope.$on('widget-select:selectAll', function (event, selected) {
                    $scope.selected = selected ? selected : !$scope.selected;
                    changeState(selected);
                });

                function changeState(selected) {

                    $superCtrl.select($scope.index, selected, $scope.data); // 与父指令通信
                    $superCtrl.onSelect($scope.index, selected, $scope.data); // 点击时触发
                }

            }
        };
    })
;
/**=========================================================
 * Module: src/js/module/directive/table.js
 * table 组件指令
 * @author: haili042
 * @time: 2016年4月11日 20:11:38
 =========================================================*/

App
    .directive('widgetTable', ['widgetService', function (widgetService) {
        return {
            restrict: 'EA',
            scope: {
                config: '='
            },
            replace: true,
            transclude: true,
            templateUrl: '/app/tpl/widget/table.html',
            controller: function ($scope, $rootScope) {

            },
            link: function ($scope, $elem, $attr) {

                // 默认参数
                var defaultConfig = {
                        checkbox: true,
                        border: false,
                        pagination: false, // 默认不展示
                        pageNumber: 1,
                        pageSize: 20,
                        pageList: [10, 20, 30, 40],
                        sortName: 'id',
                        sortOrder: 'asc'
                    },
                    newConfig = $scope.config, // 传进来的参数
                    queryParams = {}
                    ;

                // jquery 深拷贝
                $scope.config = $.extend(true, {}, defaultConfig, newConfig);
                queryParams = $scope.config.queryParams;
                queryParams.pageNumber = $scope.config.pageNumber;
                queryParams.pageSize = $scope.config.pageSize;
                queryParams.sortName = $scope.config.sortName;
                queryParams.sortOrder = $scope.config.sortOrder;



                $scope.config = widgetService.concatConfig(defaultConfig, newConfig);

                // 等待请求返回的数据
                widgetService.getData($scope.config,
                    function (data) {
                        $scope.config.data = data;
                    });


                // 事件绑定
                // --------------------
                $scope.allChecked = false;
                $scope.selectAll = function (e) {
                    $scope.allChecked = !$scope.allChecked;
                    $scope.$broadcast('widget-table:checkAll', $scope.allChecked);
                };


                var checkedRows = {};

                $scope.$on('widget-table-row:checked', function (event, data) {

                    var index = data.index,
                        checkedRow = {
                            data: $scope.config.data.rows[index],
                            index: index
                        };
                    if (data.checked) {
                        checkedRows[index] = checkedRow;
                    } else {
                        delete checkedRows[index];
                    }
                    console.log(checkedRows);
                });
            }
        };
    }])

    .directive('widgetTableRow', function () {
        return {
            restrict: 'A',
            require: '^widgetTable',
            scope: {
                index: '='
            },
            replace: true,
            transclude: true,
            template: '<tr ng-transclude=""></tr>',
            link: function ($scope, $elem, $attr, $superCtrl) {

                $scope.checked = false;

                // 接收checkbox 事件
                $scope.$on('widget-checkbox:checked', function (event, data) {
                    event.stopPropagation(); // 停止传播

                    $scope.checked = data;

                    // 向上发送事件
                    $scope.$emit('widget-table-row:checked', {
                        index: $scope.index,
                        checked: data
                    });
                });

                // 接收全选事件
                $scope.$on('widget-table:checkAll', function (event, data) {
                    $scope.$broadcast('widget-checkbox:checking', data);
                });

                $elem.on('click', function (e) {
                    $scope.$broadcast('widget-checkbox:checking', $scope.checked);
                });

            }
        };
    })

    .directive('widgetTablePagination', function () {
        return {
            restrict: 'A',
            require: '^widgetTable',

            link: function ($scope, $elem, $attr, $superCtrl) {

            }
        };
    })

;
/**=========================================================
 * Module: src/js/module/directive/widget/tree.js
 * tree 指令, 递归调用
 * @author: haili042
 * @time: 2016年4月13日 15:05:42
 =========================================================*/

App

    // 树
    .directive('widgetTree', ['$q', '$http', function ($q, $http) {
        return {
            restrict: 'E',
            templateUrl: '/app/tpl/widget/tree.html',

            scope: {
                treeData: '=',
                canChecked: '=',
                textField: '@',
                itemClicked: '&',
                itemCheckedChanged: '&',
                config: '='
            },
            controller: function ($scope) {
                $scope.itemExpended = function (item, $event) {
                    item.$$isExpend = !item.$$isExpend;
                    $event.stopPropagation();
                };
                $scope.isLeaf = function (item) {
                    return !item.children || !item.children.length;
                };
                $scope.warpCallback = function (callback, item, $event) {
                    ($scope[callback] || angular.noop)({
                        $item: item,
                        $event: $event
                    });
                };
            },
            link: function($scope, $elem, $attr) {

                // 默认参数
                var defaultConfig = {
                    },

                    newConfig = $scope.config, // 传进来的参数
                    deferred = $q.defer(),
                    promise = deferred.promise,
                    queryParams = {}
                    ;

                // jquery 深拷贝
                $scope.config = $.extend(true, {}, defaultConfig, newConfig);


                // 发送请求
                if ($scope.config.url) {

                    $http({
                        method: 'get',
                        url: newConfig.url,
                        //data: {} // post 请求使用, 数据放在, 消息体中
                        params: queryParams // 参数转成字符串放在 url 后面
                    }).success(function (data, status, headers, config) {
                        deferred.resolve(data);
                    }).error(function (data, status, headers, config) {
                        deferred.reject(data);
                    });
                }

                // 等待请求返回的数据
                promise.then(function (data) {

                    $scope.treeData = data;
                }, function (data) {

                });

            }
        }
    }])

    // 树项
    .directive('widgetTreeItem', function() {
        return {
            restrict: 'EA',
            require: '^widgetTree',
            template: '',
            link: function($scope, $elem, $attrs, $superCtrl) {

            }
        };
    })
;